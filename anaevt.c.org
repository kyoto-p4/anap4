#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <cfortran.h>
#include <hbook.h>
#include <kernlib.h>

#include "kinema.h"
#include "anap4.h"



int anaevt(int evtlen,unsigned short *rawbuf,struct p4dat *dat){
  int i,ip,j;
  int segsize,ids,ips,ipsn,count;
  unsigned short qdc[N_QDC];
  unsigned short qdcoff[N_QDC];
  unsigned short tdc[N_TDC];
  unsigned short adc[N_ADC];
  double qdcc[N_QDC];
  double tdcc[N_TDC];
  double adcc[N_ADC];
  //const double qpar[N_QDC][2]={{0.0, 0.01}, {0.0, 0.01}};
  const double tpar[N_TDC][2]={{0.0, 0.01}, {0.0, 0.01}};
  //unsigned short qdcp0[N_QDC]={0,30};
  char tmpbuf[200];
  double qx,tx;
  double times,divide;
  int diff;
  double part_max[2][5],part_min[2][5];
  double Energy[N_ADC];
  double a[N_ADC],b[N_ADC];
  double particle;



  /************* Clear Event Buffer *****************/
  for(i=0;i<N_QDC;i++) {
    qdc[i]=0;
    qdcc[i]=0.;
  }
  for(i=0;i<N_TDC;i++){
    tdc[i]=0;
    tdcc[i]=0.;
  }
  for(i=0;i<N_ADC;i++){
    adc[i]=0;
    adcc[i]=0.;
  }
  count=0;

  /************* Clear Event Buffer *****************/

  /************* Decode Event Data Here *****************/
  ip=0;
  while(ip<evtlen){  
    int tmpdat,tmpch;

    /** Segment Header ************/
    segsize=rawbuf[ip++];
    ipsn=ip+segsize-1;
    ids=rawbuf[ip++];

#if _DEBUG
    ips=0;
    printf(" New Seg %d\n",ids);
#endif

    while(ip<ipsn){ /*** Segment loop ***/
      /*** 7166 ****/
#if _DEBUG
      printf("  7166\n");
#endif
      for(i=0;i<N_QDC;i++) {
	tmpdat=rawbuf[ip++];
	tmpch=(tmpdat>>12)&0xf;
	qdc[i]=(tmpdat&0xfff);
#if _DEBUG
	sprintf(tmpbuf,"QDC:   %2d: %04x  ch:%02d  adc:%4d\n",i,tmpdat,tmpch,
		qdc[i]);
	dumpmsg(tmpbuf);
#endif
      }
      for(i=0;i<N_TDC;i++) {
	tmpdat=rawbuf[ip++];
	tmpch=(tmpdat>>12)&0xf;
	tdc[i]=(tmpdat&0xfff);
#if _DEBUG
	sprintf(tmpbuf,"TDC:   %2d: %04x  ch:%02d  adc:%4d\n",i,tmpdat,tmpch,
		tdc[i]);
	dumpmsg(tmpbuf);
#endif
      }
      for(i=0;i<N_ADC;i++) {
	tmpdat=rawbuf[ip++];
	tmpch=(tmpdat>>12)&0xf;
	adc[i]=(tmpdat&0xfff);
#if _DEBUG
	sprintf(tmpbuf,"ADC:   %2d: %04x  ch:%02d  adc:%4d\n",i,tmpdat,tmpch,
		adc[i]);
	dumpmsg(tmpbuf);
#endif
      }
    }
  }
  /**** Decode Event Data Above***************/


  /**** Data Analysis Here ***************/

/* energy calibration */
  /*
    for(i=0;i<N_QDC;i++) {
    qdcc[i]=(qdc[i]-qpar[i][0])*qpar[i][1];
    qdcoff[i]=qdc[i]-qdcp0[i];
    }
  */
  for(i=0;i<N_ADC;i++){
    adcc[i]=(double)adc[i];
  }

  a[0]=0.005664;
  b[0]=0.1493;
  a[1]=0.005697;
  b[1]=0.1085;
  a[2]=0.005730;
  b[2]=0.1156;
  a[3]=0.005765;
  b[3]=0.1050;
  a[4]=0.;
  b[4]=0.;
  a[5]=0.0176;
  b[5]=-0.1338;
  a[6]=0.0165;
  b[6]=-0.1695;

  for(i=0;i<N_ADC;i++){
    Energy[i]=a[i]*adcc[i]+b[i];
  }
 
/* time calibration */
/*  for(i=0;i<N_TDC;i++) {
    tdcc[i]=(tdc[i]-tpar[i][0])*tpar[i][1];
  }
*/
/*loction calibration*/

  for(i=0;i<N_QDC;i++){
    qdcc[i]=1.*qdc[i];
  }
    
  for(i=0;i<N_TDC;i++){
    tdcc[i]=1.*tdc[i];
  }

  
    
/*normalization*/

  qx=100.*log(qdcc[1]/qdcc[0])/((log(qdcc[0]*qdcc[1]))-8.);

  tx=100.*(tdcc[0]-tdcc[1])/(4350.-3950.);


  for(i=0;i<4;i++){
    if(tdc[i]<4000){
      count++;}}



  /**** Data Analysis Above ***************/
  
  /*********** Booking here **********/
  
  for(i=0;i<N_QDC;i++){
    HF1(10+i,qdc[i],1.0);
  }
  for(i=0;i<N_TDC;i++){
    HF1(20+i,tdc[i],1.0);
  }
  
  for(i=0;i<N_ADC;i++){
    HF1(30+i,adc[i],1.0);
  }
  
  for(i=0;i<4;i++){
    //    if(tdc[i]<4000){
      HF1(40+i,Energy[i],1.0);
      HF1(400+i,adc[i],1.0);
      if(tdc[5]<4000){ 
	HF1(45,Energy[5],1.0);
      }
      if(tdc[6]<4000){
	HF1(46,Energy[6],1.0);
      }
      //    }
  }
  for(i=0;i<4;i++){
    if(tdc[i]<4000.){
      //      if(tdc[5]>1900&&tdc[5]<2300){
	HF2(200+i,Energy[5],tdc[5],1.0);
	//      }
	//      if(tdc[6]>800&&tdc[6]<1400){
	HF2(205+i,Energy[6],tdc[6],1.0);
	//      }
    }
  }
  //一つのtdcが反応したやつのE-dE相関
  /*
  part_max[0][0]=340.;//3He
  part_min[0][0]=244.15;
  part_max[0][1]=62.872;//p
  part_min[0][1]=15.079;
  part_max[0][2]=100.85;//d
  part_min[0][2]=63.;
  part_max[0][3]=1430.;//t
  part_min[0][3]=0.;
  part_max[0][4]=341.;//4He
  part_min[0][4]=370.;
  */

  if(count==1){
    for(i=0;i<4;i++){
      if(tdc[i]<4000){
	if(tdc[5]<4000){
	  HF2(50+i,Energy[5],Energy[i],1.0);
	  HF2(55,Energy[5],Energy[i],1.0);
	  if(Energy[i]<5.0){
	    HF2(56,Energy[5],Energy[i],1.0);
	  }
	}
	if(tdc[6]<4000){
	  HF2(110+i,Energy[6],Energy[i],1.0);
	  HF2(115,Energy[6],Energy[i],1.0);
	  if(Energy[i]<5.){
	    HF2(116,Energy[6],Energy[i],1.);
	}
	}
	/*
	for(j=0;j<5;j++){
	  if(Energy[5]*Energy[i]<part_max[0][j]&&Energy[5]*Energy[i]>part_min[0][j]){
	    HF2(60+10*j+i,Energy[5],Energy[i],1.0);
	    HF2(65+10*j,Energy[5],Energy[i],1.0);
	  }
	  if(Energy[6]*Energy[i]<part_max[0][j]&&Energy[6]*Energy[i]>part_min[0][j]){
	    HF2(120+10*j+i,Energy[6],Energy[i],1.0);
	    HF2(120+10*j,Energy[6],Energy[i],1.0);
	  }
	}
	*/
	if(tdc[5]<4000.){
	  HF1(170+i,Energy[5]*Energy[i],1.0);
	  HF1(175,Energy[5]*Energy[i],1.0);
	}
	if(tdc[6]<4000.){
	  HF1(180+i,Energy[6]*Energy[i],1.0);
	  HF1(185,Energy[6]*Energy[i],1.0);
	}
      }
    }
  }

  for(i=1;i<4;i++){
    if(tdc[i]<4000.){
      if(tdc[5]<4000.){
	particle=Energy[i]-(20.597-0.68726*Energy[5]+0.01307*pow(Energy[5],2)-0.000090341*pow(Energy[5],3));
	if(particle<0.7&&particle>-1.){
	  HF1(500+i+1,Energy[5],1.0);
	}
	particle=Energy[i]-(5.8545-0.42841*Energy[5]+0.017563*pow(Energy[5],2)-0.00032971*pow(Energy[5],3))+0.0000022013*pow(Energy[5],4);
	if(particle<0.4&&particle>-0.4){
	  HF1(510+i+1,Energy[5],1.0);
	}
	particle=Energy[i]-(7.8959-0.4985*Energy[5]+0.018754*pow(Energy[5],2)-0.00033173*pow(Energy[5],3)+0.0000021694*pow(Energy[5],4));
	if(particle<0.4&&particle>-0.4){
	  HF1(520+i+1,Energy[5],1.0);
	}
	particle=Energy[i]-(7.3861-0.23625*Energy[5]+0.0038451*pow(Energy[5],2)-0.000022058*pow(Energy[5],3)+0.0000000093345*pow(Energy[5],4));
	if(particle<0.3&&particle>-0.2){
	  HF1(530+i+1,Energy[5],1.0);
	}
      }
      if(tdc[6]<4000.){
	particle=Energy[i]-(21.6-0.42713*Energy[6]+0.0045974*pow(Energy[6],2)-0.000017767*pow(Energy[6],3));
	if(particle<1.&&particle>-1.){
	  HF1(600+i+1,Energy[6],1.0);
	}
	particle=Energy[i]-(6.3587-0.42044*Energy[6]+0.015462*pow(Energy[6],2)-0.00027846*pow(Energy[6],3)+0.0000019026*pow(Energy[6],4));
	if(particle<0.4&&particle>-0.5){
	  HF1(610+i+1,Energy[6],1.0);
	}
	particle=Energy[i]-(8.3909-0.39874*Energy[6]+0.010881*pow(Energy[6],2)-0.00014926*pow(Energy[6],3)+0.00000079462*pow(Energy[6],4));
	if(particle<0.4&&particle>-0.4){
	  HF1(620+i+1,Energy[6],1.0);
	}
	particle=Energy[i]-(9.6659-0.34966*Energy[6]+0.0064095*pow(Energy[6],2)-0.000044278*pow(Energy[6],3)+0.*pow(Energy[6],4));
	if(particle<0.3&&particle>-0.3){
	  HF1(630+i+1,Energy[6],1.0);
	}
      }
    }
  }


  /*********** Booking Above **********/
  return(ip);
}
